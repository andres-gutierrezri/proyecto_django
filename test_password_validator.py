#!/usr/bin/env python
"""
Script para probar el validador de contrase√±as.
Ejecutar con: python3 test_password_validator.py
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proyecto.settings')
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
django.setup()

from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError

print("=" * 60)
print("PRUEBAS DEL VALIDADOR DE CONTRASE√ëAS")
print("=" * 60)
print()

# Lista de pruebas
tests = [
    # (contrase√±a, debe_pasar, descripci√≥n)
    ("password", False, "Sin may√∫scula y sin car√°cter especial"),
    ("PASSWORD", False, "Sin min√∫scula y sin car√°cter especial"),
    ("Password", False, "Sin car√°cter especial"),
    ("Password123", False, "Sin car√°cter especial"),
    ("password123!", False, "Sin may√∫scula"),
    ("PASSWORD123!", False, "Sin min√∫scula"),
    ("Pass 123!", False, "Con espacios"),
    ("Pass123!üòÄ", False, "Con emoji"),
    ("Abc1!", False, "Menos de 8 caracteres"),
    ("Password123!ExtraLong", False, "M√°s de 20 caracteres (22)"),
    ("Password123!ExtraLongPassword", False, "M√°s de 20 caracteres (30)"),
    ("Pass123!", True, "V√°lida - 8 caracteres exactos"),
    ("Password123!", True, "V√°lida - con todos los requisitos"),
    ("MyP@ssw0rd", True, "V√°lida - con s√≠mbolos alternativos"),
    ("Secure#2025", True, "V√°lida - formato corto"),
    ("MyC0mpl3x.Pass!", True, "V√°lida - formato largo (15 caracteres)"),
    ("Ab1!Cd2@Ef3#Gh4$Ij", True, "V√°lida - 20 caracteres exactos"),
]

passed = 0
failed = 0

for password, should_pass, description in tests:
    try:
        validate_password(password)
        result = "ACEPTADA"
        if should_pass:
            print(f"‚úÖ {description}")
            print(f"   Contrase√±a: '{password}' - {result} (correcto)")
            passed += 1
        else:
            print(f"‚ùå {description}")
            print(f"   Contrase√±a: '{password}' - {result} (ERROR: debi√≥ rechazarse)")
            failed += 1
    except ValidationError as e:
        result = "RECHAZADA"
        if not should_pass:
            print(f"‚úÖ {description}")
            print(f"   Contrase√±a: '{password}' - {result} (correcto)")
            print(f"   Errores: {', '.join(e.messages)}")
            passed += 1
        else:
            print(f"‚ùå {description}")
            print(f"   Contrase√±a: '{password}' - {result} (ERROR: debi√≥ aceptarse)")
            print(f"   Errores: {', '.join(e.messages)}")
            failed += 1
    print()

print("=" * 60)
print("RESUMEN DE PRUEBAS")
print("=" * 60)
print(f"Total de pruebas: {len(tests)}")
print(f"‚úÖ Pruebas exitosas: {passed}")
print(f"‚ùå Pruebas fallidas: {failed}")
print()

if failed == 0:
    print("üéâ ¬°Todos los validadores funcionan correctamente!")
else:
    print("‚ö†Ô∏è  Hay validadores que necesitan revisi√≥n.")
    sys.exit(1)
